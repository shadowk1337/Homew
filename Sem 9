void inclusionSort (int *ar, int size){
    for (int i = 1; i < size; i++){
        int value = ar[i];
        int index = i;
        while ((index > 0) && (ar[index - 1] > value)){
            ar[index] = ar[index - 1];
            index--;
        }
        ar[index] = value;
    }
}

TASK 1
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#define SIZE 1000

int main(int argc, char *argv[]) {
    FILE *fp;
    int ch, count = 0;
    char str[SIZE];
    int max = atoi(argv[2]);
    if ((fp = fopen(argv[1], "r")) == NULL){
        fprintf(stderr, "Не удалось открыть файл %s", argv[1]);
        exit(EXIT_FAILURE);
    }
    while ((ch = getc(fp)) != EOF){
        if (ch == '\n')
            count++;
    }
    if (ch == EOF)
        count++;
    rewind(fp);
    for (int i = 0; i < count; i++){
        fgets(str, SIZE, fp);
        if (i >= count - max)
            fputs(str, stdout);
    }
    putchar('\n');
    fclose(fp);
}

TASK 2
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define TSIZE 500

int main(int argc, char *argv[]) {
    FILE *f1, *f2;
    char str1[TSIZE], str2[TSIZE];
    if (argc != 3) {
        puts("Неправильный ввод");
        exit(EXIT_FAILURE);
    }
    if ((f1 = fopen(argv[1], "r")) == NULL)
        exit(EXIT_FAILURE);
    if ((f2 = fopen(argv[2], "r")) == NULL)
        exit(EXIT_FAILURE);
    while (!feof(f1) || !feof(f2)){
        if (!feof(f1)) {
            fscanf(f1, "%s", str1);
            puts(str1);
        }
        if (!feof(f2)) {
            fscanf(f2, "%s", str2);
            puts(str2);
        }
    }
}

TASK 3
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main(int argc, char *argv[]) {
    FILE *fp;
    int p, n;
    int ch;
    int count = 0, j = 1;
    int page = 1;
    if (argc < 6){
        fprintf(stderr, "Использование: %s -p число -n число", argv[0]);
        exit(EXIT_FAILURE);
    }
    p = atoi(argv[3]);
    n = atoi(argv[5]);
    if ((fp = fopen(argv[1], "r")) == NULL){
        fprintf(stderr, "Невозможно открыть файл %s", argv[1]);
        exit(EXIT_FAILURE);
    }
    printf("%d: ", j);
    while ((ch = getc(fp)) != EOF){
        if (ch == '\n' || count == n - 1){
            putchar('\n');
            if (j++ == p){
                printf("--Page%d--\n", page++);
                j = 1;
            }
            printf("%d: ", j);
            if ((count == n - 1) && (ch != '\n'))
                putchar(ch);
            count = 0;
            continue;
        }
        count++;
        putchar(ch);
    }
    printf("\n--Page%d--\n", page);
    fclose(fp);
}
