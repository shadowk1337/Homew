Task 1
#include <stdio.h>
#define SWAP(s, a, b){s tmp = a; a = b; b = tmp;}

int main() {
    int x = 1;
    int y = 10;
    SWAP(double, x, y);
    printf("%d %d", x, y);
    return 0;
}

Task 2
#include <stdio.h>
#include <string.h>
#define ArSize 50

int binary_search (int ar[], int val, int left, int right);

int main() {
    int seq[ArSize] = {1, 2, 3, 4, 5, 6, 7, 8};
    int val = 1;
    printf("%d", binary_search(seq, val, 0, 7));
    return 0;
}

int binary_search (int ar[], int val, int left, int right){
    int mid;
    mid = (left + right) / 2;
    if (val > ar[mid])
        return binary_search(ar, val, mid + 1, right);
    else if (val < ar[mid])
        return binary_search(ar, val, left, mid - 1);
    return mid;
}

Task 4
1
#include <stdio.h>
#include <math.h>
#include <stdlib.h>

void my_radixsort (int ar[], int size);
int find_size (int ar[], int size);
void swap (int ar[], int i, int j);

int main() {
    int ar[50] = {1, -3, 5, -2, 3, 4, 1, 0};
    my_radixsort(ar, 8);
    return 0;
}

void my_radixsort (int ar[], int size){
    int digit;
    for (int i = 0; i < size; i++){
        int j = 1, val = ar[i];
        while (val /= 10)
            j++;
        if (j > digit)
            digit = j;
    }
    for (int i = 1; i <= digit; i++)
        for (int j = 0; j < size; j++)
            for (int x = j + 1; x < size; x++)
                if (abs(ar[j]) % (int)pow(10, i) > abs(ar[x]) % (int)pow(10, i))
                    swap(ar, j, x);
    for (int i = 0; i < size; i++)
        printf("%d ", ar[i]);
}

void swap (int ar[], int i, int j){
    int tmp = ar[j];
    ar[j] = ar[i];
    ar[i] = tmp;
}
2
