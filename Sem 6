Task 1
#include <stdio.h>
#define SWAP(s, a, b){s tmp = a; a = b; b = tmp;}

int main() {
    int x = 1;
    int y = 10;
    SWAP(double, x, y);
    printf("%d %d", x, y);
    return 0;
}

Task 2
#include <stdio.h>
#include <string.h>
#define ArSize 50

int binary_search (int ar[], int val, int left, int right);

int main() {
    int seq[ArSize] = {1, 2, 3, 4, 5, 6, 7, 8};
    int val = 1;
    printf("%d", binary_search(seq, val, 0, 7));
    return 0;
}

int binary_search (int ar[], int val, int left, int right){
    int mid;
    mid = (left + right) / 2;
    if (val > ar[mid])
        return binary_search(ar, val, mid + 1, right);
    else if (val < ar[mid])
        return binary_search(ar, val, left, mid - 1);
    return mid;
}

Task 3
#include <stdio.h>
#include <stdlib.h>

void swap (int ar[], int i, int j);
void my_qsort (int* ar, int left, int right);
void func (int ar[], int left, int right);

int main() {
    int seq[50] = {4, 1, 24, 55, 1, 3, 2};
    my_qsort(seq, 0, 7);
    putchar('\n');
    for (int i = 0; i <= 7; i++)
        printf("%d ", seq[i]);
    return 0;
}

void my_qsort (int ar[], int left, int right){
    int i, last;
    void swap(int ar[], int i, int j);
    if (left >= right)
        return;
    swap(ar, left, (left + right) / 2);
    last = left;
    for(i = left+1; i <= right; i++)
        if (ar[i] < ar[left])
            swap(ar, ++last, i);
    swap(ar, left, last);
    for (int j = last; j > left; j--)
        func(ar, left, j);
    for (int j = last; j < right; j++)
        func(ar, j, right);
}

void func (int ar[], int left, int right){
    int cyc_last;
    swap(ar, left, (left + right)/2);
    cyc_last = left;
    for(int i = left+1; i <= right; i++)
        if (ar[i] < ar[left])
            swap(ar, ++cyc_last, i);
    swap(ar, left, cyc_last);
}

void swap (int* ar, int i, int j){
    int tmp = ar[j];
    ar[j] = ar[i];
    ar[i] = tmp;
}

Task 4
1
#include <stdio.h>
#include <math.h>
#include <stdlib.h>

void my_radixsort (int ar[], int size);
int find_size (int ar[], int size);
void swap (int ar[], int i, int j);

int main() {
    int ar[50] = {1, -3, 5, -2, 3, 4, 1, 0};
    my_radixsort(ar, 8);
    return 0;
}

void my_radixsort (int ar[], int size){
    int digit;
    for (int i = 0; i < size; i++){
        int j = 1, val = ar[i];
        while (val /= 10)
            j++;
        if (j > digit)
            digit = j;
    }
    for (int i = 1; i <= digit; i++)
        for (int j = 0; j < size; j++)
            for (int x = j + 1; x < size; x++)
                if (abs(ar[j]) % (int)pow(10, i) > abs(ar[x]) % (int)pow(10, i))
                    swap(ar, j, x);
    for (int i = 0; i < size; i++)
        printf("%d ", ar[i]);
}

void swap (int ar[], int i, int j){
    int tmp = ar[j];
    ar[j] = ar[i];
    ar[i] = tmp;
}
2
#include <stdio.h>
#include <math.h>
#include <stdlib.h>

void countingsort (int ar[], int ar_size);

int main() {
    int ar[50] = {1, 2, 5, 1, 10, 2, 4, 11, 5};
    countingsort(ar, 9);
    for (int i = 0; i < 9; i++)
        printf("%d ", ar[i]);
    return 0;
}

void countingsort (int ar[], int ar_size){
    int* pa;
    int size = sizeof(int), max = ar[0];
    int j = 0, x = 0;
    for (int i = 0; i < ar_size; i++)
        if (ar[i] > max)
            max = ar[i];
    pa = (int*)malloc(max * sizeof(int));
    while (j < ar_size) {
        pa[ar[j]]++;
        j++;
    }
    for (int i = 0; i <= max; i++){
        for (int k = 0; k < pa[i]; k++)
            ar[x++] = i;
    }
}
